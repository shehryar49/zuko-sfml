import sfml

#Game State
var IN_GAME=0
var IN_MENU1=1
var IN_MENU2=2
var OVER=4 #game over await mouse click to go again

var ColorBlack = sfml.Color(0,0,0)
var ColorWhite = sfml.Color(255,255,255)
var ColorGreen = sfml.Color(0,255,0)

class Button
{
  var rect = nil
  var font = nil
  var text = nil

  function __construct__()
  {
     self.font = sfml.Font()
     self.text = sfml.Text()
     self.rect = sfml.Rectangle(0.0,0.0)
     self.font.loadFromFile("semicoder.otf")
     self.text.setFont(self.font)
  }
  function setDimensions(var width,var height)
  {
    self.rect.setSize(width,height)
  }
  function setText(var s,var chSize=32,var color=ColorBlack)
  {
    self.text.setString(s)
    self.text.setCharacterSize(chSize)
    self.rect.setFillColor(color)
  }
  function setOutline(var color = ColorWhite,var thickness =1)
  {
    self.rect.setOutlineColor(ColorWhite)
    self.rect.setOutlineThickness(1.0)
  }
  function setPosition(var x,var y)
  {
    self.rect.setPosition(x,y)
    self.text.setPosition(x+10,y+2)
  }
  function getPosition()
  {
     return self.rect.getPosition()
  }
  function render(var w)
  {
    w.draw(self.rect)
    w.draw(self.text)
  }
  function setBgColor(var color)
  {
    self.rect.setFillColor(color)
  }
  function setColor(var color)
  {
    self.text.setFillColor(color)
  }
}
class PongMenu
{
  var buttons = nil
  var t = nil
  var sprite = nil
  function __construct__()
  {
    self.t = sfml.Texture()
    self.sprite = sfml.Sprite()
  }
  function Init(var options,var chSize=32,var hideBtnBg=false,var x=350)
  {
    self.t.loadFromFile("bg2.jpg")
    self.sprite.setTexture(self.t)
    self.buttons = []
    for(var i=1 to len(options) step 1)
      self.buttons.push(Button())
    var y = 200
    for(var i=0 to len(options)-1 step 1)
    {
      var btn = self.buttons[i]
      btn.setText(options[i],chSize)
      if(hideBtnBg)
        btn.setDimensions(0.0,0.0)
      else
        btn.setDimensions(110.0,50.0)
      btn.setPosition(x+0.0,y+0.0)
      btn.setOutline()
      y+=80
    }
  }
  function render(var win)
  {
     win.clear()
     win.draw(self.sprite)
     for(var i=0 to len(self.buttons)-1 step 1)
     {
       var btn = self.buttons[i]
       btn.render(win)
     }
  }
  function processMouseMove(var pos)
  {
     for(var i=0 to len(self.buttons)-1 step 1)
     {
       var btnPos = self.buttons[i].getPosition()
       var btn = self.buttons[i]
       if(pos.x >= btnPos.x and pos.y>=btnPos.y and pos.x<btnPos.x+110 and pos.y<btnPos.y+50)
       {
        btn.setBgColor(ColorWhite)
        btn.setColor(ColorBlack)
       }
       else
       {
        btn.setBgColor(ColorBlack)
        btn.setColor(ColorWhite)
       }
     }
  }
  function processMouseClick(var pos)
  {
     for(var i=0 to len(self.buttons)-1 step 1)
     {
       var btnPos = self.buttons[i].getPosition()
       
       if(pos.x >= btnPos.x and pos.y>=btnPos.y and pos.x<btnPos.x+110 and pos.y<btnPos.y+50)
       {
        # buttons[i] is clicked
        return i # ith button is clicked
       }
     }
     return -1
  }
}
class Bat
{
  var rect = nil
  function __construct__()
  {
    self.rect = sfml. Rectangle(0.0,0.0)
  }
  function setSize(var x,var y)
  {
    self.rect.setSize(x,y)
  }
  function setFillColor(var color = ColorWhite)
  {
    self.rect.setFillColor(color)
  }
  function setPosition(var x,var y)
  {
    self.rect.setPosition(x,y)
  }
  function x()
  {
    return self.rect.getPosition().x
  }
  function y()
  {
    return self.rect.getPosition().y
  }
  function render(var win)
  {
    win.draw(self.rect)
  }
  function getGlobalBounds()
  {
    return self.rect.getGlobalBounds()
  }
}

class Ball
{
  var rect = nil
  var velX = nil
  var velY = nil
  function __construct__()
  {
    self.rect = sfml.Rectangle(0.0,0.0)
  }
  function setSize(var x,var y)
  {
    self.rect.setSize(x,y)
  }
  function setFillColor(var color = ColorWhite)
  {
    self.rect.setFillColor(color)
  }
  function setPosition(var x,var y)
  {
    self.rect.setPosition(x,y)
  }
  function x()
  {
    return self.rect.getPosition().x
  }
  function y()
  {
    return self.rect.getPosition().y
  }
  function render(var win)
  {
    win.draw(self.rect)
  }
  function getGlobalBounds()
  {
    return self.rect.getGlobalBounds()
  }
  function invertVX()
  {
    self.velX*=(-1)
  }
  function invertVY()
  {
    self.velY*=(-1)
  }
  
}

class PongGame
{
  var window = nil
  var lines = nil
  var f = nil
  var daScore =  nil
  var winnerText = nil
  var bat1 = nil
  var bat2 = nil
  var ball = nil
  var menu = nil
  var gameState = nil
  var score1 = 0
  var score2 = 0
  var vsComputer = true
  var difficulty = 1
  var maxScore = 0
  var hit = true
  var counter = 0

  var isRunning = false
  function __construct__(var maxS)
  {
    self.window = sfml.RenderWindow(800,600,"Pong Game")
    self.maxScore = maxS
    self.gameState = IN_MENU1
    self.ball = Ball()
    self.bat1 = Bat()
    self.bat2 = Bat()
    self.lines = sfml.VertexArray()
    self.f = sfml.Font()
    self.daScore = sfml.Text()
    self.winnerText = sfml.Text()
    self.menu = PongMenu()
    self.bat1.setSize(15.0,150.0)
    self.bat2.setSize(15.0,150.0)
    self.bat1.setPosition(5.0,225.0)
    self.bat2.setPosition(780.0,225.0)
    self.lines.setPrimitiveType(sfml.LinesStrip)
    self.lines.resize(2)  
    self.lines.setKth(0,400.0,0.0)
    self.lines.setKth(1,400.0,600.0)
    self.ball.setSize(15.0,15.0)
    self.ball.setFillColor(ColorGreen)
    self.ball.setPosition(385.0,300.0)
    self.ball.velX = (-250)
    self.ball.velY = (-250)
    self.window.setFramerateLimit(60)
    self.f.loadFromFile("SUBWT___.ttf")
    self.daScore.setFont(self.f)
    self.daScore.setString("0  0")
    self.daScore.setCharacterSize(32)
    self.daScore.setPosition(370.0,0.0)
    self.winnerText.setFont(self.f)
    self.winnerText.setPosition(325.0,280.0)
    self.isRunning = true
    self.menu.Init(["New","Exit"])
    self.counter = 0
  }
  function resetGame()
  {
    self.bat1.setPosition(5.0,225.0)
    self.bat2.setPosition(780.0,225.0)
    self.score1 = 0
    self.score2 = 0
    self.ball.setPosition(385.0,300.0)
    self.daScore.setFont(self.f)
    self.daScore.setString("0  0")
    self.hit = true
    self.counter = 0
  }
  function pollEvents()
  {
    var event = sfml.Event()
    while (self.window.pollEvent(event))
    {
        if (event.type == sfml.EventClosed)
        {
            self.isRunning = false
        }
        else if(event.type == sfml.EventMouseButtonPressed)
        {
          if(event.mouseButton == sfml.MouseLeft)
          {
            var i = self.menu.processMouseClick(sfml.getMousePosition(self.window))
            if(self.gameState==IN_MENU1)
            {
              if(i==0) #new game
              {
                self.gameState = IN_MENU2
                var options=["Easy","Medium","Deadly","2 Players"]
                self.menu.Init(options,17)
              }
              else if(i==1)
              {
                self.isRunning = false
              }
            }
            else if(self.gameState==IN_MENU2)
            {
              if(i==0)
              {
                self.gameState = IN_GAME
                self.difficulty = 1
              }
              else if(i==1)
              {
                self.gameState = IN_GAME
                self.difficulty = 2
              }
              else if(i==2)
              {
                self.gameState = IN_GAME
                self.difficulty = 3
              }
              else if(i==3)
              {
                self.gameState = IN_GAME
                self.difficulty = -1
                self.vsComputer = false
              }
              
            }
            else if(self.gameState==OVER)
            {
              self.resetGame()
              self.gameState = IN_GAME
            }
          }
        }
        else if(event.type == sfml.EventMouseMoved and self.gameState!=IN_GAME)
        {
          self.menu.processMouseMove(sfml.getMousePosition(self.window))
        }
        else if(event.type == sfml.EventKeyPressed)
        {
            if(event.keycode == sfml.KeyboardW and self.bat1.y()>=20)
            {
            self.bat1.setPosition(self.bat1.x(),self.bat1.y()-20)
            }
            else if(event.keycode == sfml.KeyboardS and self.bat1.y()<=450)
            {
            self.bat1.setPosition(self.bat1.x(),self.bat1.y()+20)
            }
            else if(!self.vsComputer and event.keycode == sfml.KeyboardUp and self.bat2.y()>=20)
            {
            self.bat2.setPosition(self.bat2.x(),self.bat2.y()-20)
            }
            else if(!self.vsComputer  and  event.keycode == sfml.KeyboardDown and self.bat2.y()<=450)
            {
            self.bat2.setPosition(self.bat2.x(),self.bat2.y()+20)
            }
            
        }
    }
  }
  function update(var dt)
  {
    self.pollEvents()
    var hitByComputer = false
    var hitByP1 = false
    var collision = false
    if(self.gameState != IN_GAME)
      return nil
      #if it's against computer then update bat2's position as well
      if(self.vsComputer  and  self.hit)
      {
          if(self.ball.y()<465)
          {
            self.bat2.setPosition(self.bat2.x(),self.ball.y()-15)
          }
      }
      #detect collisions
      #advanced mathematics
      #sorry kiddos
      if(self.bat1.getGlobalBounds().intersects(self.ball.getGlobalBounds()) )
      {
          self.ball.invertVX()
          hitByP1 = true
          collision = true
      }
      else if(self.bat2.getGlobalBounds().intersects(self.ball.getGlobalBounds()) )
      {
          self.ball.invertVX()
          collision = true
          hitByComputer = self.vsComputer
      }
      if(hitByComputer and self.difficulty==1)
        self.hit = !self.hit
      else if(hitByComputer and self.difficulty==2)
      {
          self.counter+=1
          if(self.counter%2==0)# miss next shot 
            self.hit = false
          else
            self.hit=true
      }
      
      self.ball.setPosition(self.ball.x() + self.ball.velX*dt,self.ball.y() + self.ball.velY*dt)
      if(self.ball.x()<=-15) # missed by player 1
      {
          self.score2+=1
          self.ball.setPosition(385.0,300.0)
          self.daScore.setString(str(self.score1)+" "+str(self.score2))
          if(self.score2==self.maxScore)
          {
            self.gameState = OVER
            if(self.score2 > self.score1)
            {
              if(self.vsComputer)
                self.winnerText.setString("You lose!")
              else
                self.winnerText.setString("Player 2 won!")
            }
            else 
              self.winnerText.setString("Game Draw")
          }
      }
      else if(self.ball.x()>=800)# missed by bat2
      {
          self.ball.invertVX()
          self.score1+=1
          self.ball.setPosition(385.0,300.0) 
          self.daScore.setString(str(self.score1)+" "+str(self.score2))
          if(self.vsComputer and (self.difficulty<3))
            self.hit = !self.hit
          if(self.score1==self.maxScore)
          {
            self.gameState = OVER
            if(self.score1>self.score2)
            {
              if(self.vsComputer)
              {
                self.winnerText.setString("You won!")
              }
              else
                self.winnerText.setString("Player 1 won!")
            }
            else
              self.winnerText.setString("Game Draw")
          }
      }
      else if(self.ball.y()<=0 or self.ball.y()>=585)
         self.ball.invertVY()
  }
  function render()
  {
    self.window.clear(ColorBlack)
    if(self.gameState == IN_GAME)
    {
      # render bat objects on game's window
      self.bat1.render(self.window)
      self.bat2.render(self.window)
      self.window.draw(self.lines)
      self.ball.render(self.window)
      self.window.draw(self.daScore)
    }
    else if(self.gameState==OVER)
    {
      self.window.draw(self.winnerText)
    }
    else
      self.menu.render(self.window)
    self.window.display()
  }
}


var dt_clock = sfml.Clock()
var dt = 0
var game = PongGame(5)
while(game.isRunning)
{
  dt = dt_clock.restart().asSeconds()
  # Update
  game.update(dt)
  # Render
  game.render()
}
